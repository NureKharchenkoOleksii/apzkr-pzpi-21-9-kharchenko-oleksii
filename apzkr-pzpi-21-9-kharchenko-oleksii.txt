Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для організації роботи 
торгового центру

Студент гр. ПЗПІ-21-9		 __________________ Харченко О. М.
(підпис)
Керівник роботи 			___________________ ст.викл. Сокорчук І.П.
(підпис) 
Роботу захищено «__»_________2024 р.
з оцінкою _________________________ 

Комісія: 				___________________ доц. Лещинський В.О. 
(підпис)
___________________ доц. Лещинська І.О. 
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)



Харків
2024 р.

Харківський національний університет радіоелектроніки 

Факультет комп’ютерних наук Кафедра програмної інженерії	
Спеціальність 121 – Інженерія програмного забезпечення		
Курс                     3                     Семестр 	                  6 		
Навчальна дисципліна Архітектура програмного забезпечення	

ЗАВДАННЯ 
НА КУРСОВУ РОБОТИ СТУДЕНТОВІ  
                                  Харченко Олексію Миколайовичу				
1. Тема проекту: Програмна система для організації роботи торгового центру
2. Термін узгодження завдання з лабораторних робіт «_18_»_березня_ 2024 р.
3. Термін здачі завдання з лабораторних робіт «   06    »      червня     2024 р.  
4. Вихідні дані до проекту: в програмній системі для організації роботи торгового центру передбачити: розробка бекенд-інфраструктури для обробки та зберігання даних, реалізація API для взаємодії з клієнтськими застосунками
5. Зміст звітів з лабораторних робіт (перелік питань, що належить розробити):
Vision & Scope, back-end, програмне забезпечення для IoT пристрою, front-end, мобільний програмний застосунок
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси):
Vision & Scope, Deployment Diagram, Use Case Diagram, Entity– Relationship Model, State Diagram, Interaction Overview Diagram, Activity Diagram, Package Diagram, Component Diagram, Entity–Relationship Model 
КАЛЕНДАРНИЙ ПЛАН

	Основні етапи виконання проекту в рамках лабораторних
робіт	Термін виконання
етапів	Примітка
	Функціональна специфікація програмного проекту	6 квітня
2024 року	
	Проектування програмного проекту	27 квітня
2024 року	
	Кодування програмного проекту	18 травня
2024 року	
	Оформлення пояснювальної записки	29 травня
2024 року	
	Захист курсової роботи	8 червня
2024 року	

Дата видачі теми проекту «	14	»	березня	2024 р.
Керівник		  ст.викл. Сокорчук І.П.
(підпис)
Завдання прийняв до виконання
ст.гр. ПЗПІ-21-9		  Харченко О. М.
(підпис) 
РЕФЕРАТ


Пояснювальна записка до курсової роботи: 68 с., 23 рис., 2 табл., 2 додатки, 5 джерел.
ТОРГОВИЙ ЦЕНТР, АВТОМАТИЗАЦІЯ, ДАТЧИКИ, ЕФЕКТИВНІСТЬ, УПРАВЛІННЯ.
Об'єкт дослідження - середовище торгового центру та фактори, що впливають на комфорт відвідувачів і ефективність роботи закладу. Мета проєкту - розробка програмної системи для моніторингу та контролю параметрів функціонування торгового центру.
Методологія розробки включає використання таких технологій: мережа IoT-пристроїв на базі ESP32, датчики цін, Express для серверної частини, розподілена база даних для зберігання та аналізу даних, Kotlin для розробки кросплатформного мобільного додатку.
Система дозволяє інтегрувати різні датчики та пристрої IoT, які збирають дані про стан торгового центру. Інформація передається на центральний сервер, де обробляється та зберігається для подальшого аналізу. Мобільний додаток, розроблений на React Native, надає адміністраторам доступ до даних у реальному часі та можливість керувати різними аспектами роботи торгового центру.
При виявленні відхилень від оптимальних показників (наприклад, перевантаження певних зон, порушення температурного режиму) система автоматично вживає заходів для нормалізації ситуації. Це може включати перерозподіл потоків відвідувачів, коригування роботи систем кондиціонування або освітлення.
 
ЗМІСТ

ВСТУП......................................................................................................................7
1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ.....................................................................9
1.1 Бізнес-вимоги.....................................................................................................9
  1.1.1 Бізнес можливості........................................................................................9
  1.1.2 Бізнес-цілі та критерії успіху.....................................................................10
  1.1.3 Потреби клієнтів або ринку.......................................................................11
  1.1.4 Бізнес-ризики..............................................................................................12
1.2 Концепція рішення..........................................................................................14
  1.2.1 Окреслення концепції................................................................................14
  1.2.2 Головна функціональність.........................................................................16
  1.2.3 Припущення та залежності........................................................................16
1.3 Рамки та обмеження проєкту..........................................................................17
  1.3.1 Рамки первинного випуску........................................................................17
  1.3.2 Рамки наступних випусків.........................................................................19
  1.3.3 Обмеження та винятки...............................................................................20
1.4 Бізнес-контекст.................................................................................................21
  1.4.1 Профілі зацікавлених сторін......................................................................21
  1.4.2 Пріоритети проекту....................................................................................23
  1.4.3 Робоче середовище.....................................................................................25
2 ПОСТАНОВКА ЗАДАЧІ....................................................................................26
3 ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОЕКТУ.............................................28
  3.1 Проектування серверної частини проекту...................................................28
  3.2 Проектування IoT-частини системи.............................................................31
  3.3 Проектування клієнтської частини проекту................................................32
4 РЕАЛІЗАЦІЯ ПРОГРАМНОЇ СИСТЕМИ.......................................................43
4.1 Архітектура та розробка серверної частини.................................................43
  4.1.1 Розробка API для керування кімнатами...................................................47
  4.1.2 Розробка API для управління пристроями системи................................48
  4.1.3 Розробка API для керування конфігураціями пристроїв........................49
4.2 Архітектура та розробка IoT частини............................................................50
4.3 Архітектура та розробка web частини...........................................................51
ВИСНОВКИ...........................................................................................................56
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ.....................................................................58
ДОДАТОК А...........................................................................................................59
ДОДАТОК Б...........................................................................................................65

 
ВСТУП


У сучасному світі торгові центри відіграють важливу роль у житті споживачів, пропонуючи різноманітні товари та послуги під одним дахом. Ефективне управління такими комплексами вимагає постійного моніторингу та оптимізації численних факторів, що впливають на комфорт відвідувачів, ефективність роботи орендарів та загальну прибутковість закладу.
Неоптимальні умови в торговому центрі можуть призвести до зниження потоку відвідувачів, зменшення часу їх перебування, падіння продажів та незадоволеності як клієнтів, так і орендарів. Натомість, створення ідеального середовища сприяє збільшенню відвідуваності, подовженню часу перебування клієнтів, зростанню продажів та підвищенню лояльності до торгового центру.
Традиційні методи управління торговими центрами, які покладаються на мануальний моніторинг та прийняття рішень, часто виявляються неефективними, повільними та схильними до людських помилок. Вони також вимагають значних ресурсів та не дозволяють оперативно реагувати на зміни ситуації.
Враховуючи ці виклики, виникла потреба у створенні комплексної програмної системи для автоматизованого управління торговим центром. Ця система інтегрується з мережею IoT-пристроїв та датчиків, розміщених по всьому торговому центрі, які відстежують такі параметри як потоки відвідувачів, температура, вологість, якість повітря, рівень освітлення та інші важливі показники.
Система аналізує зібрані дані в режимі реального часу, використовуючи алгоритми машинного навчання та предиктивної аналітики. Це дозволяє не лише оперативно реагувати на поточні зміни, але й прогнозувати майбутні тренди та оптимізувати роботу торгового центру з випередженням.
Головна мета проєкту - розробка інтелектуальної системи, яка автоматично збирає дані, аналізує їх та оптимізує всі аспекти функціонування торгового центру. Це включає управління потоками відвідувачів, оптимізацію енергоспоживання, підтримку комфортного мікроклімату, координацію роботи орендарів та багато іншого. Кінцева ціль - підвищення задоволеності відвідувачів, збільшення прибутковості для орендарів та власників торгового центру, а також забезпечення сталого та екологічного функціонування комплексу.
 
1	АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Бізнес-вимоги
1.1.1	Бізнес можливості

Аналоги:
-	ShopSmart360 є комплексною платформою для цифрового управління торговими центрами. Система пропонує інтеграцію фінансового планування, управління орендою та аналізу потоків відвідувачів. Ключовою перевагою ShopSmart360 є модуль прогнозування попиту, який допомагає оптимізувати розміщення магазинів та планування маркетингових акцій. Проте, платформа має обмежені можливості для взаємодії з клієнтами та не включає функціонал для управління програмами лояльності.
-	RetailVision – це спеціалізоване рішення для візуалізації та аналізу даних у сфері роздрібної торгівлі. Воно надає потужні інструменти для створення інтерактивних звітів та дашбордів, які допомагають керівництву торгових центрів приймати обґрунтовані рішення. RetailVision відрізняється своїми можливостями обробки великих обсягів даних та створення предиктивних моделей. Однак, ця система фокусується виключно на аналітиці і не пропонує інструментів для оперативного управління торговим центром.
-	Наша програмна система прагне об'єднати найкращі аспекти існуючих рішень, додаючи інноваційні функції, які відповідають сучасним викликам ринку. Ключовою особливістю нашої системи є інтеграція з IoT-пристроями, що дозволяє створити "розумний" торговий центр з автоматизованим управлінням енергоефективністю та безпекою. Крім того, наша платформа включає модуль для створення та управління омніканальними маркетинговими кампаніями, що дозволяє синхронізувати офлайн та онлайн взаємодію з клієнтами. Монетизація системи планується через модель підписки з різними рівнями доступу, а також через додаткові послуги з консалтингу та інтеграції. Такий комплексний підхід дозволить створити екосистему, яка задовольнить потреби як великих торгових центрів, так і невеликих ритейл-парків, сприяючи їх адаптації до мінливих умов ринку та змін у поведінці споживачів.

1.1.2	Бізнес-цілі та критерії успіху


БЦ-1: Оптимізація операційної ефективності:
-	БЦ-1.1: Знизити операційні витрати торгового центру на 20% протягом першого року впровадження системи.
-	БЦ-1.2: Автоматизувати не менше 80% рутинних процесів управління, включаючи облік оренди та комунальні платежі.
БЦ-2: Підвищення задоволеності орендарів та відвідувачів:
-	БЦ-2.1: Впровадити систему лояльності, яка охопить не менше 70% відвідувачів торгового центру.
-	БЦ-2.2: Забезпечити заповнюваність торгових площ на рівні не нижче 95% протягом усього року.
БЦ-3: Розширення цифрових можливостей:
-	БЦ-3.1: Інтегрувати системи управління з не менше ніж 10 типами IoT-пристроїв для створення "розумного" торгового простору.
-	БЦ-3.2: Запустити мобільний додаток торгового центру з функціями навігації та персоналізованих пропозицій, досягнувши 100 000 активних користувачів за перші 6 місяців.

КУ-1: Фінансова ефективність:
-	КУ-1.1: Досягти збільшення середнього чеку відвідувачів на 15% за рахунок персоналізованих маркетингових кампаній.
-	КУ-1.2:	Зменшити час простою торгових площ між орендарями на 50% завдяки оптимізації процесу управління орендою.
КУ-2: Енергоефективність та екологічність:
-	КУ-2.1: Знизити споживання енергії торговим центром на 25% за рахунок впровадження розумних систем управління.
-	КУ-2.2: Забезпечити сортування та переробку не менше 80% відходів торгового центру.
 
КУ-3 Інноваційність та конкурентоспроможність:
-	КУ-3.1: Впровадити не менше 5 інноваційних технологій (наприклад, AR-навігація, безконтактні платежі) протягом першого року роботи системи.
-	Досягти рівня задоволеності відвідувачів не нижче 4.8 з 5 за результатами онлайн-опитувань та відгуків.

1.1.3	Потреби клієнтів або ринку


Ефективне управління орендними відносинами:
 - 	 Адміністрація торгового центру потребує систему, яка забезпечить прозоре управління орендними договорами, автоматизацію розрахунків та своєчасне нагадування про платежі та продовження контрактів.
Оптимізація потоків відвідувачів:
-	Керівництво прагне мати інструменти для аналізу та оптимізації потоків відвідувачів, щоб максимізувати продажі та покращити досвід покупців у торговому центрі.
Інтегрована система безпеки:
-	Клієнти очікують наявності сучасної системи безпеки, яка включає відеоспостереження, контроль доступу та швидке реагування на надзвичайні ситуації.
Персоналізований маркетинг та програми лояльності:
-	Орендарі та адміністрація шукають можливості для створення та управління персоналізованими маркетинговими кампаніями та програмами лояльності, які охоплюють весь торговий центр.
Енергоефективне управління інфраструктурою:
-	Існує потреба в системі, яка оптимізує використання енергії, води та інших ресурсів, зменшуючи операційні витрати та підвищуючи екологічність торгового центру.
Енергоефективне управління інфраструктурою:
-	Існує потреба в системі, яка оптимізує використання енергії, води та інших ресурсів, зменшуючи операційні витрати та підвищуючи екологічність торгового центру.

1.1.4	Бізнес-ризики


Технологічні збої:
-	Ризик виникнення технічних несправностей або помилок у програмному забезпеченні, що може призвести до порушення роботи ключових систем торгового центру, таких як управління орендою, безпека або клімат-контроль.
Зміни споживчої поведінки:
-	Існує ризик, що зростання популярності онлайн-шопінгу може знизити відвідуваність торгових центрів. Недостатня адаптація до нових моделей споживання може обмежити ефективність впровадження системи.
Конкуренція з боку інших торгових центрів:
-	Ризик втрати конкурентної переваги через впровадження подібних систем управління іншими торговими центрами. Це може призвести до зменшення частки ринку або необхідності додаткових інвестицій в інновації.
Невідповідність очікуванням орендарів:
-	Ризик незадоволення орендарів впровадженою системою через її невідповідність їхнім потребам або складність у використанні. Це може призвести до втрати ключових орендарів та зниження привабливості торгового центру.
Фінансові ризики:
-	Ризик недостатнього повернення інвестицій у впровадження та підтримку системи управління. Високі початкові витрати можуть створити фінансовий тиск на торговий центр, особливо в умовах економічної невизначеності.
Ризики безпеки даних:
-	Ризик порушення конфіденційності даних орендарів та відвідувачів, що може призвести до юридичних наслідків та втрати довіри. Це особливо критично при впровадженні систем персоналізованого маркетингу та програм лояльності.
Регуляторні ризики:
-	Ризик невідповідності новим законодавчим вимогам, особливо в сфері захисту персональних даних, екологічних норм та безпеки. Це може призвести до штрафів та необхідності дорогих модифікацій системи.
 
1.2	Концепція рішення
1.2.1	Окреслення концепції


Наш продукт є важливим інструментом для ефективної організації та управління роботою торгового центру. Впровадження даної програмної системи дозволить адміністрації та орендарям оптимізувати бізнес-процеси, підвищити якість обслуговування відвідувачів та збільшити прибутковість торгового центру.
  Основні переваги цього продукту полягають у автоматизації ключових аспектів управління торговим центром, таких як розподіл торгових площ, контроль орендних платежів, управління потоками відвідувачів та координація маркетингових заходів. Програмна система надає інтегрований механізм, який враховує специфіку різних типів магазинів, сезонність, поведінку покупців та інші важливі фактори, що дозволяє приймати обґрунтовані рішення для підвищення ефективності роботи торгового центру.
  Впровадження програмної системи організації роботи торгового центру допоможе керівництву та орендарям досягти оптимальних результатів у веденні бізнесу. Вони зможуть забезпечити ефективне використання торгових площ, покращити взаємодію між різними магазинами та сервісами, а також збільшити привабливість торгового центру для відвідувачів. Крім того, це дозволить підвищити конкурентоспроможність на ринку, залучати нових орендарів та збільшувати загальний дохід торгового центру.
  Програмна система організації роботи торгового центру є інноваційним рішенням, яке допоможе оптимізувати всі аспекти управління та підвищити ефективність бізнес-процесів. Завдяки використанню передових технологій та алгоритмів аналізу даних, наш продукт стане незамінним інструментом для всіх, хто прагне до сучасного та прибуткового управління торговими центрами. 
1.2.2	Головна функціональність


MF-1: Реєстрація та авторизація користувачів. Можливість створення особистого профілю для адміністрації, орендарів та співробітників торгового центру з відповідними рівнями доступу
MF-2: Управління орендою приміщень. Функція пошуку та розподілу торгових площ на основі заданих критеріїв, таких як розмір, розташування, тип бізнесу та умови оренди
MF-3: Аналіз ефективності розміщення. Аналіз ефективності розташування магазинів та сервісів для оптимізації потоків відвідувачів та збільшення продажів
MF-4: Фінансовий моніторинг. Відстеження орендних платежів, доходів та витрат торгового центру
MF-5: Налаштування параметрів аналітики. Можливість налаштування параметрів аналізу для відповідності специфічним вимогам керівництва торгового центру
MF-6: Сповіщення та нотифікації. Автоматичні сповіщення про закінчення термінів оренди, необхідність технічного обслуговування та важливі події в торговому центрі
MF-7: Інтеграція з системами безпеки та обліку відвідувачів. Інтеграція з системами відеоспостереження та підрахунку відвідувачів для аналізу потоків покупців
MF-8: Комунікаційні інструменти. Інструменти для спілкування між
адміністрацією та орендарями для обговорення питань оренди та організації роботи
MF-9: Мобільний додаток та веб-інтерфейс. Можливість керування всіма аспектами роботи торгового центру через мобільний додаток або веб-інтерфейс
MF-10: Технічна підтримка. Підтримка користувачів з будь-якими технічними питаннями або проблемами, пов’язаними з використанням системи.

1.2.3	Припущення та залежності


Зал №1: Припускається, що дані про ефективність розміщення магазинів та потоки відвідувачів будуть доступні та точно аналізуватися системою для забезпечення оптимального розподілу торгових площ.
Зал №2: Система передбачає, що користувачі (адміністрація та орендарі) будуть активно взаємодіяти з платформою, оновлюючи інформацію про свої магазини та відповідально ставитися до управління орендою.
Зал №3: Для нормального функціонування системи необхідний стабільний доступ до Інтернету, щоб забезпечити постійне оновлення даних та комунікацію між користувачами.

При №1: Припускається, що база даних магазинів, орендарів та фінансових показників буде регулярно оновлюватися для забезпечення актуальності інформації.
При №2: Припускається, що діяльність системи буде відповідати законодавчим нормам, що регулюють роботу торгових центрів та захист персональних даних.
 При №3: Система припускає, що її можна буде використовувати з різними пристроями та операційними системами, забезпечуючи широку доступність для користувачів.

1.3	Рамки та обмеження проєкту
1.3.1	Рамки первинного випуску


У веб-застосунку користувачі будуть мати можливість:
	реєструватися та авторизуватися;
	переглядати доступні торгові площі та їх характеристики;
	отримувати сповіщення про нові пропозиції оренди та важливі події;
	налаштовувати параметри пошуку відповідно до вимог свого бізнесу;
	взаємодіяти з адміністрацією та іншими орендарями через вбудовані комунікаційні інструменти.
До функціоналу IoT відноситься:
	інтеграція з системами підрахунку відвідувачів та відеоспостереження для аналізу потоків покупців.
У мобільному застосунку користувачі будуть мати можливість:
	реєструватися та авторизуватися;
	переглядати інформацію про орендовані площі, фінансові показники;
	отримувати сповіщення про важливі події, пов'язані з роботою торгового центру;
	налаштовувати параметри системи для оптимізації роботи свого бізнесу.
MF-1: Реєстрація та авторизація
Користувачі зможуть переглядати детальну інформацію про доступні торгові площі та їх характеристики.
MF-2: Пошук та перегляд торгових площ
Користувачі зможуть переглядати детальну інформацію про доступні торгові площі та їх характеристики.
MF-3: Сповіщення та нотифікації
Система надаватиме користувачам сповіщення про нові пропозиції оренди.
 
MF-4: Комунікаційні інструменти
Користувачі зможуть спілкуватися з адміністрацією та іншими орендарями для обговорення питань оренди та співпраці.
MF-5: Інтеграція з системами безпеки та обліку відвідувачів
Система інтегруватиметься з системами відеоспостереження та підрахунку відвідувачів для аналізу потоків покупців.
MF-6: Мобільний додаток та веб-інтерфейс
Користувачі зможуть використовувати мобільний додаток та веб-інтерфейс для керування своїм профілем та орендою.
MF-7: Технічна підтримка
Користувачі отримуватимуть технічну підтримку для вирішення будь- яких питань, пов’язаних з використанням системи.


1.3.2	Рамки наступних випусків


У веб-застосунку користувачі будуть мати можливість:
	автоматично отримувати рекомендації щодо оптимального розміщення магазинів;
	встановлювати параметри аналізу для оцінки ефективності розміщення;
	відстежувати динаміку продажів та відвідуваності в різних зонах торгового центру;
	керувати системою через веб-застосунок для зручності та ефективності.
Адміністратор у веб-застосунку буде мати можливість:
	відповідати на запити техпідтримки та надавати консультації орендарям.
У мобайл-застосунку користувачі також будуть мати можливість:
	автоматично отримувати аналітику щодо ефективності свого бізнесу;
 
	встановлювати специфічні параметри для різних типів магазинів;
	відстежувати історію орендних платежів та аналізувати фінансові показники.
	керувати системою через мобільний додаток для зручності використання в будь-якому місці.
MF-4: Розширений аналіз та оптимізація розміщення
Система забезпечить автоматичний аналіз ефективності розміщення магазинів та надаватиме рекомендації щодо оптимізації.
MF-6: Інтегровані комунікаційні засоби
Система включатиме розширені засоби для спілкування між адміністрацією та орендарями.
MF-8: Аналіз фінансових показників
Система надаватиме інструменти для аналізу фінансових показників та оцінки ефективності бізнесу.
MF-9: Дистанційне керування та моніторинг
Користувачі матимуть можливість дистанційно керувати своїми профілями та відстежувати статус оренди та роботи магазинів.
MF-10: Розширена техпідтримка
Користувачі отримають доступ до розширеної техпідтримки, яка допоможе їм вирішувати технічні питання та оптимізувати використання системи.

1.3.3	Обмеження та винятки


Обмеження та винятки:
	Залежність від доступу до Інтернету: Система організації роботи торгового центру вимагає постійного підключення до Інтернету для обміну даними та комунікації між користувачами. У випадку відсутності Інтернету, деякі функції системи можуть бути обмежені або недоступні;
 
	Сумісність з пристроями: Система може бути не повністю сумісною з усіма типами пристроїв або операційними системами, що може обмежити доступність для деяких користувачів;
	Точність даних про відвідуваність: Точність рекомендацій системи залежить від якості та повноти даних про відвідуваність та продажі, які надаються користувачами та збираються автоматично. Неповні або неточні дані можуть вплинути на результати аналізу та оптимізації;
	Законодавчі обмеження: Система повинна відповідати законодавчим нормам країн, де вона використовується, що може вплинути на її функціональність та доступність;
	Відповідальність користувачів: Система очікує, що користувачі будуть уважно вводити дані та відповідально використовувати аналітичні інструменти. Невідповідальне використання може призвести до помилкових бізнес-рішень;
	Залежність від стабільності програмного забезпечення: Як і будь-яка програмна система, існує ризик виникнення помилок або збоїв, які можуть тимчасово обмежити функціональність або доступність сервісу;
Потреба в регулярному оновленні: Для забезпечення актуальності бази даних та алгоритмів аналізу, система потребує регулярних оновлень, що може вимагати додаткових зусиль з боку користувачів та адміністраторів.

1.4	Бізнес-контекст
1.4.1	Профілі зацікавлених сторін


Профілі зацікавлених сторін проекту наведені в таблиці 1.1.

Таблиця 1.1 – Профілі зацікавлених сторін проєкту
Показник	Виконан ня (етапи)	Обмеження (граничні значення)	Ступінь свободи
(допустимий
діапазон)
План робіт	Продукт має бути випущеним
приблизно до
28.06.2024		Можлив е відхилення від графіку на 1-3 місяців
Функціональні
сть			100%
функціоналу
має працювати на релізі 1.0
Якість			100%
всіх наявних данних з датчиків повинні бути
вірними
Персонал		Максимальн ий розмір команди це 1 розробник та
адміністратор	





Продовження таблиці 1.1.
Ціна		≈	10 000
гривень	Допусти ме відхилення
на 15%

1.4.2	Пріоритети проекту


Пріоритети проєкту наведені в таблиці 1.2. 
 
Таблиця 1.2 – Пріоритети проєкту
Показник	Виконан ня (етапи)	Обмеження (граничні значення)	Ступінь свободи
(допустимий
діапазон)
План робіт	Продукт має бути випущеним
приблизно до
28.06.2024		Можлив е відхилення від графіку на 1-3 місяців
Функціональні
сть			100%
функціоналу має працювати на релізі 1.0
Якість			100%
всіх наявних даних з датчиків повинні бути
вірними
Персонал		Максимальн
ий розмір команди
це 1 розробник та
адміністратор	
Ціна		≈	10 000
гривень	Допустиме відхилення на 15%

1.4.3	Робоче середовище

Даний продукт буде використовуватися через браузер на пк або за допомогою телефону та планшету. Для використання мобільного додатку має використовуватися система Android 12 та вище або iOS 15 та вище.
Інформація про торгові центри та користувачів буде зберігатися в базі даних MongoDB [1].
Для розробки веб-застосунку буде використовуватися React [2-3], bootstrap 5. Для розробки серверної частини  продукту буде використовуватися NodeJS [4-5].
Для розробки IoT частини продукту буде використовуватися Arduino. Середою розробки буде Arduino IDE. Пристрій включатиме модулі для моніторингу орендованих площ торгових центрів. Він буде оснащений датчиками руху для визначення наявності людей у приміщеннях, модулями зв’язку для передачі даних про заповненість та використання приміщень, а також Wi-Fi модулем для підключення до інтернету і обміну даними з центральною базою даних системи.
Для розробки мобільного застосунку буде використовуватися Kotlin та Android Studio.
 
2	ПОСТАНОВКА ЗАДАЧІ


За результатами аналізу потреб сучасних торгових центрів, метою проєкту є створення комплексної програмної системи для оптимізації роботи торгового центру та підвищення задоволеності відвідувачів.
База даних системи повинна містити інформацію про: відвідувачів та їхні переваги; орендарів та їхні магазини; IoT-пристрої та датчики; конфігурації обладнання; показники роботи торгового центру.
Функціонал для менеджера торгового центру:
а)	авторизація та персоналізація інтерфейсу;
б)	моніторинг ключових показників ефективності (KPI) торгового центру в реальному часі;
в)	аналіз історичних даних та трендів;
г)	створення завдань для персоналу на основі аналітичних даних;
ґ)	перегляд рекомендацій щодо оптимізації роботи центру.
Функціонал для адміністратора системи:
а)	управління обліковими записами та правами доступу;
б)	конфігурація та моніторинг мережі IoT-пристроїв;
в)	налаштування інтеграцій з зовнішніми системами (наприклад, системами безпеки, паркування);
г)	моніторинг всіх параметрів торгового центру в режимі реального часу;
ґ)	створення та редагування автоматичних сценаріїв управління;
д)	аналіз впливу різних факторів на відвідуваність та продажі;
е)	управління оновленнями системи та резервним копіюванням даних.
Система управління торговим центром повинна підтримувати широкий спектр IoT-пристроїв та датчиків для забезпечення комплексного моніторингу та оптимізації роботи закладу. Ця мережа включає в себе лічильники відвідувачів для точного відстеження потоків клієнтів, датчики температури, вологості та якості повітря для підтримки оптимального мікроклімату. Додатково, система інтегрує камери з функцією аналізу руху відвідувачів, що дозволяє оптимізувати розташування магазинів та рекламних матеріалів. Розумні системи освітлення забезпечують енергоефективність та створюють комфортну атмосферу, а датчики заповненості парковки допомагають ефективно керувати транспортними потоками.
Для забезпечення глобального використання система повинна відповідати вимогам локалізації та інтернаціоналізації. Це включає підтримку різних мов інтерфейсу, що дозволяє працювати з системою користувачам з різних країн. Важливим аспектом є адаптація до різних часових зон та форматів дати і часу, що забезпечує коректне відображення даних для користувачів у різних регіонах. Система також повинна підтримувати різні валюти та формати цін, що є критичним для міжнародних торгових мереж. Налаштування одиниць вимірювання, включаючи як метричну, так і імперську системи, забезпечує зручність використання для різних користувачів. Крім того, система повинна адаптувати контент до культурних особливостей різних регіонів, що підвищує її релевантність та ефективність у глобальному масштабі.
У цілому, система повинна забезпечувати високу продуктивність при обробці даних у реальному часі, гарантуючи надійну роботу 24 години на добу, 7 днів на тиждень. Крім того, архітектура системи має передбачати можливість легкого масштабування для адаптації до зростання та розширення торгового центру, забезпечуючи тим самим довгострокову ефективність та рентабельність інвестицій у технологічну інфраструктуру.
 
3	ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОЕКТУ
3.1	Проектування серверної частини проекту


Першим етапом розробки було визначення та опис усіх необхідних сутностей системи для реалізації визначеного функціоналу управління торговим центром. На основі цього аналізу була розроблена ER-модель даних, яка візуалізує всі сутності та зв'язки між ними (див. рис. Б.1 у додатку Б).
Модель даних включає в себе наступні основні сутності та їх ключові атрибути: 
а) магазин:
1)	магазин_id;
2)	назва;
3)	категорія;
4)	розташування;
5)	контактна особа;
6)	номер телефону;
7)	електронна пошта;
8)	години роботи; 
б) співробітник:
1)	співробітник_id;
2)	ім’я;
3)	прізвище;
4)	посада;
5)	магазин_id;
6)	контактний номер
7)	електронна пошта;
8)	дата найму;
9)	пароль_хешований;
в) товар:
1)	товар_id;
2)	назва;
3)	опис;
4)	ціна;
5)	категорія;
6)	магазин_id;
7)	кількість на складі;
г) клієнт:
1)	клієнт_id;
2)	ім’я;
3)	прізвище;
4)	електронна пошта;
5)	номер телефону;
6)	бали лояльності;
7)	пароль_хешований;
д) замовлення:
1)	замовлення_id;
2)	клієнт_id;
3)	магазин_id;
4)	список товарів (id товару, кількість, ціна);
5)	загальна сума;
6)	дата замовлення;
7)	статус.
е) акція:
1)	акція_id;
2)	назва;
3)	опис;
4)	дата початку;
5)	дата закінчення;
6)	відсоток знижки;
7)	список магазинів, де діє акція;
ж) оренда:
1)	оренда_id;
2)	магазин_id;
3)	дата початку;
4)	дата закінчення;
5)	місячна ставка;
6)	статус.
з) паркування:
1)	місце_id;
2)	номер місця;
3)	статус зайнятості;
4)	номер автомобіля;
5)	час в’їзду;
6)	час виїзду.

Ці сутності та їх атрибути забезпечують всю необхідну інформацію для реалізації запланованого функціоналу системи управління торговим центром.
Далі були визначені сценарії використання системи. Функціонал розподілений між чотирма основними акторами: Гість, Клієнт, Співробітник магазину та Адміністратор торгового центру.
Гість має обмежений доступ і може лише переглядати загальну інформацію про торговий центр, магазини та акції. Для отримання повного доступу необхідно зареєструватися та авторизуватися в системі.
Клієнт може переглядати товари, робити замовлення, відстежувати статус замовлень, накопичувати бали лояльності та користуватися знижками.
Співробітник магазину може керувати асортиментом товарів, обробляти замовлення, оновлювати інформацію про магазин та переглядати статистику продажів.
Адміністратор торгового центру має повний доступ до системи, включаючи керування орендою приміщень, створення акцій, аналіз загальної статистики торгового центру та управління паркуванням.
На основі представлених сценаріїв використання була створена UML діаграма прецедентів, яка відображає всі можливі варіанти взаємодії користувачів з системою.
Взаємодія між серверною і клієнтською частинами, а також з IoT пристроями (наприклад, датчиками паркування), реалізована за допомогою REST API. Це забезпечує гнучку структуру взаємодії та дозволяє легко масштабувати систему, додаючи нові функції та інтегруючи додаткові компоненти.
Таким чином, в результаті концептуального моделювання предметної області, були визначені основні сутності програмної системи управління торговим центром, їх атрибути, та створені ER-модель та діаграма прецедентів, які відображають структуру та функціональність системи.
Більш детальна інформація про взаємодію різних частин системи представлена на UML-діаграмі розгортання, яка демонструє фізичне розміщення компонентів системи та їх взаємозв'язки (див. рис. 3.1).

 
Рисунок 3.1 – Діаграма розгортання (Deployment Diagram)

Для демонстрації основного функціоналу системи управління торговим центром розроблено діаграму активності (див. рис. 3.2). Вона відображає головні дії та етапи, які виконують менеджери та адміністратори для ефективної організації роботи ТЦ. 

 
Рис. 3.2 – UML діаграма активності
Додатково створено діаграму активності, яка ілюструє процес додавання нових магазинів, управління орендою та комунікації з орендарями.

3.2	Проектування IoT-частини системи

IoT-складова проекту взаємодіє з фізичним простором торгового центру, відстежуючи потоки відвідувачів, температуру в приміщеннях, енергоспоживання та безпеку. Пристрої збирають дані та передають їх на центральний сервер для аналізу та прийняття рішень (див. рис. 3.3).
 
Рисунок 3.3 – UML діаграма прецедентів IoT частини системи

За допомогою даної діаграми були окреслені функціональні вимоги до IoT частини проекту.
3.3	Проектування клієнтської частини проекту


Платформа розрахована на взаємодію з трьома категоріями учасників: клієнт, менеджер та адміністратор. Кожна група має унікальний набір повноважень та можливостей у системі.
Неавторизовані користувачі мають обмежений доступ до загальнодоступної інформації про ТЦ. Розширені функції стають доступними після входу в систему.
Для демонстрації вищезазначених сценаріїв була створена UML діаграма прецедентів (див. рис. Б.2 у додатку Б).
Загалом клієнтська частина складається наступних компонентів:
а)	Реєстрація:
1)	Самореєстрація для відвідувачів.
2)	Створення облікових записів менеджерів адміністраторами.
б)	Вхід.
1)	Безпечна автентифікація користувачів.
Програмний комплекс для управління торговим центром включає такі основні модулі та функції:
в)	Інструментарій менеджера торгового центру:
1)	Огляд детальної аналітики відвідуваності та продажів.
2)	Управління налаштуваннями торгових точок.
3)	Вивантаження, завантаження та модифікація планів розміщення магазинів.
4)	Контроль параметрів окремих приміщень ТЦ.
5)	Дослідження впливу розташування на прибутковість магазинів.
6)	Регулювання режиму роботи торгового центру.
7)	Спостереження за ключовими показниками в режимі онлайн.
г)	Функціонал адміністратора системи:
1)	Усі можливості менеджера.
2)	Керування обліковими записами співробітників.
3)	Додавання нових користувачів до системи.
4)	Визначення рівнів доступу, включаючи управління візуальними матеріалами та описами.
5)	Адміністрування торгових площ та обладнання.
6)	Створення резервних копій системних даних.
На рисунку 3.4 наведено головну сторінку.
 
Рисунок 3.4 – головна сторінка 
4	РЕАЛІЗАЦІЯ ПРОГРАМНОЇ СИСТЕМИ
4.1	Архітектура та розробка серверної частини

Для розробки серверної частини системи управління торговим центром було обрано фреймворк Express. Цей вибір обумовлений гнучкістю Express, його широкою екосистемою та простотою у використанні для створення RESTful API. Express забезпечує швидку розробку веб-сервісів, які легко масштабуються та підтримуються.
Система побудована на основі архітектури REST. Ця архітектура забезпечує ефективну взаємодію між клієнтом та сервером, що особливо важливо для системи управління торговим центром, де потрібно обробляти запити від різних користувачів (адміністраторів, орендарів, відвідувачів) та надавати актуальну інформацію про стан торгових приміщень, відвідуваність та продажі.
Для зберігання даних було обрано MongoDB. Ця потужна NoSQL база даних забезпечує гнучке зберігання інформації про торгові точки, оренду, відвідуваність та інші важливі показники роботи торгового центру. MongoDB дозволяє ефективно працювати з великими обсягами даних та легко масштабуватися, що критично важливо для системи управління великим торговим комплексом.
Проєкт має наступну структуру:
а) 	Каталог models:
1) Файл store.js, який описує модель торгової точки;
2) Файл lease.js, який описує модель договору оренди;
3) Файл visitor.js, який описує модель відвідувача;
4) Файл sale.js, який описує модель продажу;
5) Файл user.js, який описує модель користувача системи;
б)	Каталог routers:
1) Файл admin.js, де описуються маршрути, доступні адміністратору ТЦ;
2) Файл analytics.js, де описуються маршрути для отримання аналітичних даних;
3) Файл auth.js, де описуються маршрути для автентифікації та авторизації.
Специфікація REST API та функцій які взаємодіють з веб-сервісами наведена нижче в таблиці 4.1.

Таблиця 4.1 - Специфікація REST API серверної частини системи
Сутність	Метод	Посилання	Дія
Авторизація	POST	/api/auth/register	Реєстрація нового користувача системи
		/api/auth/profile	Вхід користувача в систему
	GET	/api/auth/profile	Отримання профілю поточного користувача
	PUT	/api/auth/change-password	Зміна паролю користувача
Магазини	GET	/api/shops	Отримання списку всіх магазинів ТЦ
		/api/shops/:id	Отримання інформації про конкретний магазин

Продовження таблиці 4.1
Сутність	Метод	Посилання	Дія
Магазини	POST
	/api/shops	Створення нового магазину
	 PUT	/api/shops/:id	Оновлення даних магазину
	 DELETE	/api/shops/:id	Видалення магазину з системи
Співробітники	GET	/api/employees	Отримання списку всіх співробітників ТЦ
		/api/employees/:id	Отримання даних конкретного співробітника
	POST	/api/employees	Додавання нового співробітника
	  PUT	/api/employees/:id	Оновлення інформації про співробітника
	DELETE	/api/employees/:id	Видалення співробітника з системи




Продовження таблиці 4.1
Сутність	Метод	Посилання	Дія
Товари
	GET	/api/products	Отримання каталогу товарів
		/api/products/:id	Отримання інформації про конкретний товар
	POST	/api/products	Додавання нового товару
	PUT	/api/products/:id	Оновлення даних товару
	DELETE	/api/products/:id	Видалення товару з каталогу
 Клієнти	GET	/api/customers	Отримання списку зареєстрованих клієнтів
		/api/customers/:id	Отримання профілю конкретного клієнта
	POST	/api/customers	Реєстрація нового клієнта
	PUT	/api/customers/:id	Оновлення даних клієнта
	DELETE	/api/customers/:id	Видалення клієнта з системи



Продовження таблиці 4.1
Сутність	Метод	Посилання	Дія
Замовлення	GET	/api/orders	Отримання списку всіх замовлень
		/api/orders/:id	Отримання деталей конкретного замовлення
	POST	/api/orders	Створення нового замовлення
	PUT	/api/orders/:id	Оновлення статусу замовлення
	DELETE	/api/orders/:id	Видалення замовлення
Акції	GET	/api/promotions	Отримання списку діючих акцій та знижок
		/api/promotions/:id	Отримання деталей конкретної акції
	POST	/api/promotions	Створення нової акції
	PUT	/api/promotions/:id	Оновлення умов акції
	DELETE	/api/promotions/:id	Завершення акції




Продовження таблиці 4.1
Сутність	Метод	Посилання	Дія
Оренда	GET	/api/rentals	Отримання списку орендних договорів
		/api/rentals/:id	Отримання деталей конкретного договору оренди
	POST	/api/rentals	Створення нового договору оренди
	PUT	/api/rentals/:id	Оновлення умов оренди
	DELETE	/api/rentals/:id	Розірвання договору оренди
Паркінг	GET	/api/parking	Отримання інформації про стан паркінгу
		/api/parking/:id	Отримання інформації про конкретне паркувальне місце
	POST	/api/parking	Реєстрація нового паркувального місця
	PUT	/api/parking/:id	Оновлення статусу паркувального місця
	DELETE	/api/parking/:id	Видалення паркувального місця з системи
4.1.1	Розробка API для керування паркувальними місцями


Основна мета маршруту /api/parking (див. рядок 1 розділ А.1 у додатку А) - це забезпечення можливості створення та управління паркувальними місцями в системі, що є важливою частиною інфраструктури торгового центру.
При отриманні POST-запиту на /api/parking, метод створення паркувального місця виконує наступні дії:
а) 	перевіряє авторизацію користувача через middleware auth;
б) 	отримує дані про нове паркувальне місце з тіла запиту;
в) 	створює нове паркувальне місце в базі даних через модель Parking;
г)	повертає інформацію про створене паркувальне місце, включаючи його ідентифікатор та статус.
У разі виникнення помилок, метод обробляє їх та повертає відповідний HTTP-статус з описом помилки.
Цей маршрут також підтримує GET-запити для отримання списку всіх паркувальних місць та окремого місця за його ідентифікатором, PUT-запити для оновлення інформації про паркувальне місце, та DELETE-запити для видалення паркувального місця з системи.


4.1.2	Розробка API для управління товарами


Маршрут /api/products (див. рядок 1 розділ А.2 у додатку А) відповідає за створення та управління товарами в системі, що є ключовим аспектом для функціонування магазинів торгового центру.
При отриманні POST-запиту на /api/products, метод створення товару виконує такі дії:
а) 	перевіряє авторизацію користувача через middleware auth;
б) 	отримує дані про новий товар з тіла запиту;
в) 	створює новий товар у базі даних через модель Product;
г) 	повертає інформацію про створений товар.
Цей маршрут також підтримує GET-запити для отримання інформації про конкретний товар за його ідентифікатором, PUT-запити для оновлення інформації про товар, та DELETE-запити для видалення товару з каталогу.


4.1.3	Розробка API для керування акціями


Маршрути / та /:id (див. рядок 1 розділ А.3 у додатку А) забезпечують функціональність для отримання, створення, оновлення та видалення акцій, що є важливим для управління маркетинговими кампаніями.
При отриманні GET-запиту на /, метод для отримання всіх акцій виконує наступні дії:
а) перевіряє авторизацію користувача;
б) отримує список усіх акцій з бази даних;
в) повертає список акцій у форматі JSON.
При отриманні GET-запиту на /:id, метод для отримання конкретної акції виконує наступні дії:
а) перевіряє авторизацію користувача;
б) отримує ідентифікатор акції з параметрів запиту;
в) шукає акцію в базі даних за цим ідентифікатором;
г) якщо акція не знайдена, повертає статус 404 з повідомленням про помилку;
ґ) якщо акція знайдена, повертає її у форматі JSON.
При отриманні POST-запиту на /, метод для створення нової акції виконує наступні дії:
а) перевіряє авторизацію користувача (повинен бути менеджером або адміністратором);
б) отримує дані нової акції з тіла запиту;
в) створює нову акцію у базі даних;
г) повертає створену акцію зі статусом 201 у форматі JSON.
При отриманні PUT-запиту на /:id, метод для оновлення акції виконує наступні дії:
а) перевіряє авторизацію користувача (повинен бути менеджером або адміністратором);
б) отримує ідентифікатор акції з параметрів запиту;
в) отримує нові дані для акції з тіла запиту;
г) оновлює акцію у базі даних за цим ідентифікатором;
ґ) якщо акція не знайдена, повертає статус 404 з повідомленням про помилку;
д) якщо акція оновлена, повертає її у форматі JSON.
При отриманні DELETE-запиту на /:id, метод для видалення акції виконує наступні дії:
а) перевіряє авторизацію користувача (повинен бути менеджером або адміністратором);
б) отримує ідентифікатор акції з параметрів запиту;
в) видаляє акцію з бази даних за цим ідентифікатором;
г) якщо акція не знайдена, повертає статус 404 з повідомленням про помилку;
ґ) якщо акція видалена, повертає повідомлення про успішне видалення..



4.2 Архітектура та розробка IoT частини


Для реалізації функціональностей IoT частини системи управління торговим центром використано мову програмування Arduino (.ino). Програма взаємодіє з центральним сервером за допомогою Wi-Fi модуля ESP8266, використовуючи протокол HTTP для обміну даними.
Компоненти системи:
а) 	Arduino Uno: основна плата керування;
б) 	Wi-Fi модуль ESP8266: забезпечує бездротове з'єднання;
в) 	E-Paper дисплей Waveshare 2.9": для відображення інформації;
г) 	GPS-модуль NEO-6M: для визначення розташування;
ґ) 	Модуль живлення LM2596: для забезпечення стабільного електроживлення.
Симулятори датчиків:
а) 	PriceSensorSimulator: для симуляції оновлення цін на товари;
б) 	FootfallSensorSimulator: для симуляції підрахунку відвідувачів;
в) 	InventorySensorSimulator: для симуляції моніторингу запасів товарів.
Основні класи:
а) 	PriceSensorSimulator: симулює оновлення цін на товари;
б) 	FootfallSensorSimulator: симулює підрахунок кількості відвідувачів;
в) 	InventorySensorSimulator: симулює моніторинг рівня запасів товарів;
г) 	ServerCommunicator: забезпечує комунікацію з центральним сервером, отримання конфігурації та відправку даних;
ґ) 	DisplayManager: керує відображенням інформації на E-Paper дисплеї;
д) 	DeviceConfig: структура даних для зберігання конфігурації пристрою
Програма з'єднується з сервером та отримує конфігурацію за допомогою класу ServerCommunicator. Кожні 30 секунд пристрій перевіряє наявність оновлень, отримує дані з серверної частини через Wi-Fi з'єднання та оновлює інформацію на E-Paper дисплеї.
Надсилання даних реалізоване за допомогою HTTP POST-запиту, де дані формуються у форматі JSON. Відправляються дані про ціни, кількість відвідувачів та рівень запасів. Використання JSON формату дозволяє структуровано представляти дані та забезпечує зручний обмін інформацією між IoT пристроєм і сервером.
Оптимізація коду здійснена для роботи на пристроях з обмеженою потужністю, забезпечуючи можливість ефективного функціонування в умовах торгового центру. Використання Wi-Fi модуля ESP8266 у поєднанні з Arduino дозволяє досягти ефективної взаємодії та оптимального використання ресурсів пристрою для передачі даних на сервер.
Система IoT пристроїв у торговому центрі забезпечує автоматичне оновлення цін, моніторинг відвідуваності та контроль запасів, що підвищує ефективність управління та покращує досвід покупців.
Для розуміння використаних технологій була створена діаграма пакетів (див. рис. 4.1).

 
Рисунок 4.1 - UML діаграма пакетів для IoT частини системи

З метою більш детального відображення взаємодії між пристроєм та користувачем системи було створено спеціальну діаграму взаємодії (див. додат. Б.3). Додатково, для ілюстрації процесу комунікації пристрою з сервером, було розроблено діаграму діяльності (див. додат. Б.4). Ці діаграми надають комплексне уявлення про функціонування системи, висвітлюючи як користувацький інтерфейс, так і серверну взаємодію.


4.3 Архітектура та розробка web частини

У процесі створення веб-частини нашого проєкту ми ретельно підійшли до вибору технологій, враховуючи як функціональні вимоги, так і компетенції нашої команди розробників. Для реалізації інтерактивного та динамічного користувацького інтерфейсу ми зупинилися на потужному тандемі React та JavaScript. Ця комбінація дозволяє нам досягти оптимальної продуктивності системи та забезпечити гнучкість у розробці.
Ми активно використовуємо сучасні можливості React, зокрема хуки useState та useEffect, які значно спрощують управління станом компонентів та життєвим циклом додатку. Це дозволяє нам створювати більш чистий та зрозумілий код, полегшуючи його подальшу підтримку та розширення функціоналу.
Для забезпечення безперебійної комунікації між клієнтською частиною та сервером ми інтегрували бібліотеку Axios. Вона надає зручний інтерфейс для здійснення HTTP-запитів, що робить взаємодію з API більш ефективною та надійною.
Наш проєкт побудовано за принципом Single Page Application (SPA), що дозволяє створити максимально плавний та швидкий користувацький досвід. Завдяки цьому підходу, користувачі можуть взаємодіяти з додатком без необхідності перезавантаження сторінки, що значно покращує швидкодію та загальне враження від використання.
Архітектура SPA передбачає, що основна логіка додатку виконується на стороні клієнта, тоді як сервер відповідає переважно за обробку запитів, пов'язаних з даними. Це дозволяє розвантажити серверну частину та забезпечити більш відповідальну роботу інтерфейсу.
Для візуалізації структури нашого веб-інтерфейсу ми розробили детальну діаграму компонентів (див. рис. 4.2). Ця діаграма наочно демонструє взаємозв'язки між різними частинами додатку, що полегшує розуміння його архітектури та спрощує процес подальшої розробки та масштабування.

 
Рисунок 4.2 - UML діаграма компонентів веб-клієнту системи

Для наочного показу всіх можливих дій користувача в системі була створена діаграма діяльності (див. рис. 4.3). На цій діаграмі детально відображено, які дії доступні користувачеві та які етапи необхідно пройти для їх виконання.

 
Рисунок 4.3 - UML діаграма діяльності веб-клієнту системи
 
ВИСНОВКИ


У рамках курсового проекту було проведено концептуальне моделювання та поглиблений аналіз предметної області управління торговим центром. На основі цього аналізу була розроблена програмна система для підвищення ефективності керування різними аспектами роботи торгового центру та надання інструментів адміністраторам і користувачам для моніторингу та оптимізації бізнес-процесів.
Розробка включала створення концептуальної моделі всіх частин системи, що дозволило краще зрозуміти потреби користувачів та визначити основні вимоги до неї. Була розроблена фізична модель даних, яка враховує особливості роботи з магазинами, товарами, замовленнями, клієнтами, співробітниками, акціями, орендою та паркуванням.
Серверна частина була реалізована на платформі Node.js з використанням фреймворку Express для створення високопродуктивного веб-сервісу RESTful. База даних реалізована на MongoDB для забезпечення гнучкості та швидкодії при роботі з різноманітними даними торгового центру. На стороні клієнта була використана бібліотека React для забезпечення динамічного та інтерактивного інтерфейсу користувача, що дозволяє зручно керувати всіма аспектами роботи торгового центру.
У результаті проведеної роботи була створена програмна система управління торговим центром, яка надає користувачам інструменти для ефективного керування магазинами, товарами, замовленнями, клієнтами, співробітниками, акціями, орендою та паркуванням. Система забезпечує зручний доступ до статистики та аналітики, відстежує ключові показники в режимі реального часу і автоматизує процеси управління торговим центром.
Розроблена система також дозволяє створювати резервні копії баз даних для забезпечення безпеки та відновлення даних, що є критично важливим для безперебійної роботи торгового центру.
Загалом, розроблена система управління торговим центром є зручним інструментом для адміністраторів, менеджерів магазинів та інших співробітників. Вона не лише забезпечує простоту й ефективність управління різними аспектами роботи торгового центру, але й спрощує процес аналізу ефективності роботи, що дозволяє приймати обґрунтовані рішення щодо оптимізації бізнес-процесів та підвищення прибутковості.
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	MongoDB Documentation / MongoDB, Inc. URL: https://www.mongodb.com/docs/ (дата звернення: 22.05.2024).
2.	React Documentation / Facebook Inc. URL: https://react.dev/learn (дата звернення: 22.05.2024).
3.	React API Reference / Facebook Inc. URL: https://react.dev/reference/react (дата звернення: 22.05.2024).
4.	Node.js Documentation / OpenJS Foundation. URL: https://nodejs.org/en/docs/ (дата звернення: 22.05.2024).
5.	Express.js Documentation / OpenJS Foundation. URL: https://expressjs.com/ (дата звернення: 22.05.2024). 
ДОДАТОК А
Код програми


А.1 API для керування паркувальними місцями

1 const express = require('express')
2 const router = express.Router()
3 const auth = require('../middleware/auth')
4 const { Parking } = require('../models')

5 // Get all parking spots
6 router.get('/', auth, async (req, res) => {
7   try {
8     const parkingSpots = await Parking.find()
9     res.json(parkingSpots)
10   } catch (error) {
11     console.error('Error fetching parking spots:', error)
12     res.status(500).json({ message: 'Internal server error' })
13   }
14 })

15 // Get a single parking spot
16 router.get('/:id', auth, async (req, res) => {
17   try {
18     const parkingSpot = await Parking.findById(req.params.id)
19     if (!parkingSpot) {
20       return res.status(404).json({ message: 'Parking spot not found' })
21     }
22     res.json(parkingSpot)
23   } catch (error) {
24     console.error('Error fetching parking spot:', error)
25     res.status(500).json({ message: 'Internal server error' })
26   }
27 })

28 // Create a new parking spot
29 router.post('/', auth, async (req, res) => {
30   try {
31     const newParkingSpot = new Parking(req.body)
32     await newParkingSpot.save()
33     res.status(201).json(newParkingSpot)
34   } catch (error) {
35     console.error('Error creating parking spot:', error)
36     res.status(500).json({ message: 'Internal server error' })
37   }
38 })

39 // Update a parking spot
40 router.put('/:id', auth, async (req, res) => {
41   try {
42     const parkingSpot = await Parking.findByIdAndUpdate(req.params.id, req.body, { new: true })
43     if (!parkingSpot) {
44       return res.status(404).json({ message: 'Parking spot not found' })
45     }
46     res.json(parkingSpot)
47   } catch (error) {
48     console.error('Error updating parking spot:', error)
49     res.status(500).json({ message: 'Internal server error' })
50   }
51 })

52 // Delete a parking spot
53 router.delete('/:id', auth, async (req, res) => {
54   try {
55     const parkingSpot = await Parking.findByIdAndDelete(req.params.id)
56     if (!parkingSpot) {
57       return res.status(404).json({ message: 'Parking spot not found' })
58     }
59     res.json({ message: 'Parking spot deleted successfully' })
60   } catch (error) {
61     console.error('Error deleting parking spot:', error)
62     res.status(500).json({ message: 'Internal server error' })
63   }
64 })

65 module.exports = router


А.2 API для управління товарами


Вот пронумерованный код:

```
1 const express = require('express')
2 const router = express.Router()
3 const auth = require('../middleware/auth')
4 const { Product } = require('../models')

5 // Get all products
6 router.get('/', async (req, res) => {
7   try {
8     const products = await Product.find()
9     res.json(products)
10   } catch (error) {
11     console.error('Error fetching products:', error)
12     res.status(500).json({ message: 'Internal server error' })
13   }
14 })

15 // Get a single product
16 router.get('/:id', async (req, res) => {
17   try {
18     const product = await Product.findById(req.params.id)
19     if (!product) {
20       return res.status(404).json({ message: 'Product not found' })
21     }
22     res.json(product)
23   } catch (error) {
24     console.error('Error fetching product:', error)
25     res.status(500).json({ message: 'Internal server error' })
26   }
27 })

28 // Create a new product
29 router.post('/', auth, async (req, res) => {
30   try {
31     const newProduct = new Product(req.body)
32     await newProduct.save()
33     res.status(201).json(newProduct)
34   } catch (error) {
35     console.error('Error creating product:', error)
36     res.status(500).json({ message: 'Internal server error' })
37   }
38 })

39 // Update a product
40 router.put('/:id', auth, async (req, res) => {
41   try {
42     const product = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true })
43     if (!product) {
44       return res.status(404).json({ message: 'Product not found' })
45     }
46     res.json(product)
47   } catch (error) {
48     console.error('Error updating product:', error)
49     res.status(500).json({ message: 'Internal server error' })
50   }
51 })

52 // Delete a product
53 router.delete('/:id', auth, async (req, res) => {
54   try {
55     const product = await Product.findByIdAndDelete(req.params.id)
56     if (!product) {
57       return res.status(404).json({ message: 'Product not found' })
58     }
59     res.json({ message: 'Product deleted successfully' })
60   } catch (error) {
61     console.error('Error deleting product:', error)
62     res.status(500).json({ message: 'Internal server error' })
63   }
64 })

65 module.exports = router
А.3 API для керування акціями


1 const express = require('express')
2 const router = express.Router()
3 const auth = require('../middleware/auth')
4 const { Promotion } = require('../models')

5 // Get all promotions
6 router.get('/', async (req, res) => {
7   try {
8     const promotions = await Promotion.find()
9     res.json(promotions)
10   } catch (error) {
11     console.error('Error fetching promotions:', error)
12     res.status(500).json({ message: 'Internal server error' })
13   }
14 })

15 // Get a single promotion
16 router.get('/:id', async (req, res) => {
17   try {
18     const promotion = await Promotion.findById(req.params.id)
19     if (!promotion) {
20       return res.status(404).json({ message: 'Promotion not found' })
21     }
22     res.json(promotion)
23   } catch (error) {
24     console.error('Error fetching promotion:', error)
25     res.status(500).json({ message: 'Internal server error' })
26   }
27 })

28 // Create a new promotion
29 router.post('/', auth, async (req, res) => {
30   try {
31     const newPromotion = new Promotion(req.body)
32     await newPromotion.save()
33     res.status(201).json(newPromotion)
34   } catch (error) {
35     console.error('Error creating promotion:', error)
36     res.status(500).json({ message: 'Internal server error' })
37   }
38 })

39 // Update a promotion
40 router.put('/:id', auth, async (req, res) => {
41   try {
42     const promotion = await Promotion.findByIdAndUpdate(req.params.id, req.body, { new: true })
43     if (!promotion) {
44       return res.status(404).json({ message: 'Promotion not found' })
45     }
46     res.json(promotion)
47   } catch (error) {
48     console.error('Error updating promotion:', error)
49     res.status(500).json({ message: 'Internal server error' })
50   }
51 })

52 // Delete a promotion
53 router.delete('/:id', auth, async (req, res) => {
54   try {
55     const promotion = await Promotion.findByIdAndDelete(req.params.id)
56     if (!promotion) {
57       return res.status(404).json({ message: 'Promotion not found' })
58     }
59     res.json({ message: 'Promotion deleted successfully' })
60   } catch (error) {
61     console.error('Error deleting promotion:', error)
62     res.status(500).json({ message: 'Internal server error' })
63   }
64 })

65 module.exports = router 
ДОДАТОК Б
Діаграми

 
Рисунок Б.1 – ER модель даних

 
Рисунок Б.2 - UML діаграма прецедентів

 
Рисунок Б.3 – Діаграма взаємодії для IoT частини системи

 
Рисунок Б.4 - Діаграма діяльності для IoT частини системи
